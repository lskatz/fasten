searchState.loadedDescShard("fasten", 0, "Perform random operations on fastq files, using unix …\nPropagate an error by printing invalid read(s)\na function that reads an options object and adds fasten …\na function that processes the options on the command line …\ninput/output methods\nPrint a formatted message to stderr\nRewrite print!() so that it doesn’t panic on broken pipe.\nReverse complement a DNA sequence. Take into account …\nA FastQ reader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThere are two flavors of next: either read quickly or read …\nA sequence that can be cleaned\nA sequence struct that contains the ID, sequence, and …\nMake a blank sequence object.\nMake a blank sequence object.\nReturns the argument unchanged.\nMake a seq object from a String.\nCreate a sequence object from a string. TODO make it more …\nCalls <code>U::from(self)</code>.\nDetermine if it is a blank sequence.\nDetermine if it is a blank sequence.\nReports bool whether the read passes thresholds.\nReports bool whether the read passes thresholds.\nlower any low quality base to a zero and “N”\nAlter any ambiguity site with a quality=0\nnew sequence object\nMake a new cleanable sequence object\nPrint the result of to_string()\nsanitize an identifier string\nRead an identifier and return a cleaned version, e.g., …\nMake a String object\nTrim sequences based on quality\nTrim the ends of reads with low quality")